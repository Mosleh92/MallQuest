version: '3.8'

services:
  # Flask Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mall_gamification_app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=web_interface.py
      - DATABASE_URL=postgresql://mall_user:mall_password@db:5432/mall_gamification
      - REDIS_URL=redis://redis:6379/0
      - REDIS_ENABLED=true
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - DEBUG=false
      - MFA_ENABLED=true
      - CSRF_ENABLED=true
      - RATE_LIMIT_REQUESTS=50
      - RATE_LIMIT_WINDOW=3600
      - CACHE_TTL=1800
      - MAX_CONNECTIONS=200
      - ASYNC_WORKERS=8
      - MEMORY_LIMIT_MB=1024
      - MALL_NAME=Deerfields Mall
      - MALL_LOCATION=Abu Dhabi, UAE
      - SUPPORT_EMAIL=support@deerfields-mall.com
      - EMAIL_ENABLED=true
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./flask_session:/app/flask_session
      - ./templates:/app/templates
      - ./static:/app/static
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - mall_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: mall_gamification_db
    environment:
      - POSTGRES_DB=mall_gamification
      - POSTGRES_USER=mall_user
      - POSTGRES_PASSWORD=mall_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mall_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mall_user -d mall_gamification"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mall_gamification_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - mall_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mall_gamification_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - mall_network
    profiles:
      - production

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mall_gamification_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mall_network
    profiles:
      - development
      - staging

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mall_gamification_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@deerfields-mall.com
      - PGADMIN_DEFAULT_PASSWORD=admin_password
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "8080:80"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - mall_network
    profiles:
      - development
      - staging

  # Prometheus (Optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: mall_gamification_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - mall_network
    profiles:
      - production
      - staging

  # Grafana (Optional - for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: mall_gamification_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mall_network
    profiles:
      - production
      - staging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mall_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 